syntax = "proto3";

package pb;

option go_package = "dex-indexer-sol/pb;pb"; // 模块名 + pb 输出目录

// 枚举定义：统一的事件类型标识
enum EventType {
  UNKNOWN = 0;

  // --- 常规交易/流动性类事件 ---
  TRADE_BUY = 1;
  TRADE_SELL = 2;
  TRANSFER = 3;
  ADD_LIQUIDITY = 4;
  REMOVE_LIQUIDITY = 5;
  MINT_TO = 6;
  BURN = 7;

  // --- 系统/同步类事件（编号从 60 开始） ---
  BALANCE_UPDATE = 60;
}

// slot级别的事件数组（封装一个 slot 的全部事件）
message Events {
  uint32 version = 1;         // 批量消息结构版本号（用于升级兼容）
  uint32 chain_id = 2;        // 链 ID，例如 100000 = Solana
  uint64 slot = 3;            // 所属 slot
  repeated Event events = 4;  // 事件数组
}

// 通用事件包装结构（每条只封装一个子类型）
message Event {
  oneof event {               // 子事件体，实际只会出现一个
    TradeEvent trade = 1;
    TransferEvent transfer = 2;
    LiquidityEvent liquidity = 3;
    MintToEvent mint = 4;
    BurnEvent burn = 5;
    BalanceUpdateEvent balance = 6;
  }
}

// 交易事件：记录一次成交详情（Swap）
message TradeEvent {
  EventType type = 1;          // 事件类型（TRADE_BUY / TRADE_SELL / TRADE_UNKNOWN）
  uint32 event_index = 2;      // 事件定位索引（tx_index << 16 | ix_index << 8 | inner_index）
  uint64 slot = 3;             // 区块 slot
  int64 block_time = 4;        // 区块时间（Unix 秒）
  bytes tx_hash = 5;           // 交易哈希（64 字节）
  bytes tx_from = 6;           // 发起者地址（signer）

  uint32 token_decimals = 7;
  uint32 quote_decimals = 8;
  uint32 dex = 9;

  double amount_usd = 10;
  double price_usd = 11;

  uint64 token_amount = 12;
  uint64 quote_token_amount = 13;

  bytes token = 14;
  bytes quote_token = 15;
  bytes pair_address = 16;
  bytes token_account = 17;
  bytes quote_token_account = 18;
  bytes user_wallet = 19;

  uint64 pair_token_balance = 20;
  uint64 pair_quote_balance = 21;
  uint64 user_token_balance = 22;
  uint64 user_quote_balance = 23;
}

// 转账事件
message TransferEvent {
  EventType type = 1;
  uint32 event_index = 2;
  uint64 slot = 3;
  int64 block_time = 4;
  bytes tx_hash = 5;
  bytes tx_from = 6;

  bytes token = 7;
  bytes src_account = 8;
  bytes dest_account = 9;

  bytes src_wallet = 10;
  bytes dest_wallet = 11;

  uint64 amount = 12;
  uint32 decimals = 13;

  uint64 src_token_balance = 14;
  uint64 dest_token_balance = 15;
}

// 添加/移除流动性事件
message LiquidityEvent {
  EventType type = 1;
  uint32 event_index = 2;
  uint64 slot = 3;
  int64 block_time = 4;
  bytes tx_hash = 5;
  bytes tx_from = 6;

  bytes user_wallet = 7;

  uint32 token_decimals = 8;
  uint32 quote_decimals = 9;
  uint32 dex = 10;

  uint64 token_amount = 11;
  uint64 quote_token_amount = 12;

  bytes token = 13;
  bytes quote_token = 14;
  bytes pair_address = 15;
  bytes token_account = 16;
  bytes quote_token_account = 17;

  bytes lp_token = 18;
  uint64 lp_amount = 19;
  uint32 lp_decimals = 20;

  uint64 pair_token_balance = 21;
  uint64 pair_quote_balance = 22;
  uint64 user_token_balance = 23;
  uint64 user_quote_balance = 24;
}

// 铸币事件
message MintToEvent {
  EventType type = 1;
  uint32 event_index = 2;
  uint64 slot = 3;
  int64 block_time = 4;
  bytes tx_hash = 5;
  bytes tx_from = 6;

  bytes token = 7;
  bytes to_address = 8;
  bytes to_token_account = 9;

  uint64 amount = 10;
  uint32 decimals = 11;

  uint64 to_token_balance = 12;
}

// 销毁事件
message BurnEvent {
  EventType type = 1;
  uint32 event_index = 2;
  uint64 slot = 3;
  int64 block_time = 4;
  bytes tx_hash = 5;
  bytes tx_from = 6;

  bytes token = 7;
  bytes from_address = 8;
  bytes from_token_account = 9;

  uint64 amount = 10;
  uint32 decimals = 11;

  uint64 from_token_balance = 12;
}

// 余额变更事件（如非交易引起的变动，单独记录）
message BalanceUpdateEvent {
  EventType type = 1;           // 事件类型（BALANCE_UPDATE）
  uint32 tx_index = 2;          // tx索引
  uint64 slot = 3;              // 区块 slot
  int64 block_time = 4;         // 区块时间（Unix 秒级时间戳）

  bytes token = 5;              // token mint 地址
  bytes account = 6;            // token account 地址（SPL token）
  bytes owner = 7;              // 账户拥有者（钱包地址）

  uint64 pre_balance = 8;       // 变更前余额
  uint64 post_balance = 9;      // 变更后余额
  uint32 decimals = 10;         // token 精度
}

